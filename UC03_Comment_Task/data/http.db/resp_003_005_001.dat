//Переназначенный селект с поиском
$.fn.material_select = function (callback) {
    $(this).each(function(){
        var $select = $(this);

        if ($select.hasClass('browser-default')) {
            return; // Continue to next (return false breaks out of entire loop)
        }

        var multiple = $select.attr('multiple') ? true : false,
            lastID = $select.data('select-id'); // Tear down structure if Select needs to be rebuilt

        if (lastID) {
            $select.parent().find('span.caret').remove();
            $select.parent().find('input').remove();

            $select.unwrap();
            $('ul#select-options-'+lastID).remove();
        }

        // If destroying the select, remove the selelct-id and reset it to it's uninitialized state.
        if(callback === 'destroy') {
            $select.data('select-id', null).removeClass('initialized');
            return;
        }

        var uniqueID = Materialize.guid();
        $select.data('select-id', uniqueID);
        var wrapper = $('<div class="select-wrapper"></div>');
        wrapper.addClass($select.attr('class'));
        var options = $('<ul id="select-options-' + uniqueID +'" class="dropdown-content select-dropdown ' + (multiple ? 'multiple-select-dropdown' : '') + '"></ul>'),
            selectChildren = $select.children('option, optgroup'),
            valuesSelected = [],
            optionsHover = false;

        var label = $select.find('option:selected').html() || $select.find('option:first').html() || "";

        // Function that renders and appends the option taking into
        // account type and possible image icon.
        var appendOptionWithIcon = function(select, option, type) {
            // Add disabled attr if disabled
            var disabledClass = (option.is(':disabled')) ? 'disabled ' : '';
            var optgroupClass = (type === 'optgroup-option') ? 'optgroup-option ' : '';

            // add icons
            var icon_url = option.data('icon');
            var classes = option.attr('class');
            var value = option.val();
            if (!!icon_url) {
                var classString = '';
                if (!!classes) classString = ' class="' + classes + '"';
                // Check for multiple type.
                if (type === 'multiple') {
                    options.append($('<li data-value="' +value + '" class="' + disabledClass + '"><img src="' + icon_url + '"' + classString + '><span class="filtrable"><input type="checkbox"' + disabledClass + '/><label></label>' + option.html() + '</span></li>'));
                } else {
                    options.append($('<li data-value="' +value + '" class="' + disabledClass + optgroupClass + '"><img src="' + icon_url + '"' + classString + '><span class="filtrable">' + option.html() + '</span></li>'));
                }
                return true;
            }

            // Check for multiple type.
            if (type === 'multiple') {
                options.append($('<li data-value="' +value + '" class="' + disabledClass + '"><span class="filtrable"><input type="checkbox"' + disabledClass + '/><label></label>' + option.html() + '</span></li>'));
            } else {
                options.append($('<li data-value="' +value + '" class="' + disabledClass + optgroupClass + '"><span class="filtrable">' + option.html() + '</span></li>'));
            }
        };

        /* Create dropdown structure. */
        if (selectChildren.length) {
            selectChildren.each(function() {
                if ($(this).is('option')) {
                    // Direct descendant option.
                    if (multiple) {
                        appendOptionWithIcon($select, $(this), 'multiple');

                    } else {
                        appendOptionWithIcon($select, $(this));
                    }
                } else if ($(this).is('optgroup')) {
                    // Optgroup.
                    var selectOptions = $(this).children('option');
                    options.append($('<li class="optgroup"><span>' + $(this).attr('label') + '</span></li>'));

                    selectOptions.each(function() {
                        appendOptionWithIcon($select, $(this), 'optgroup-option');
                    });
                }
            });
        }

        var setSearchableOption = function () {
            var placeholder = $select.attr('searchable');
            var element = $('<span><input type="text" class="search" style="width: 90%; margin-left: 15px;" placeholder="' + placeholder + '"></span>');
            options.children().first().after(element);
            var timeout;
            element.find('.search').on('click', function (e) {
                e.stopPropagation();
            });
            element.find('.search').keyup(function () {

                var ul = $(this).closest('ul');
                var searchValue = $(this).val();
                if(timeout) {
                    clearTimeout(timeout);
                }
                timeout = setTimeout(function () {
                    var options = ul.find('li').find('span.filtrable');
                    options.each(function() {
                        if (typeof(this.innerHTML) == 'string') {
                            var liValue = this.innerHTML.toLowerCase();

                            if (liValue.indexOf(searchValue.toLowerCase()) === -1) {
                                //$(this).hide();
                                $(this).parent().hide();
                            } else {
                                //$(this).show();
                                $(this).parent().show();
                            }
                        }
                    });
                }, 300)
            });
        };
        //Added to search
        var searchable = $select.attr('searchable') ? true : false;
        //Added to search
        if (searchable) {
            setSearchableOption();
        }

        options.find('li:not(.optgroup)').click(function (e) {
            // Check if option element is disabled
            if (!$(this).hasClass('disabled') && !$(this).hasClass('optgroup')) {
                var selected = true;
                var selectedValue = $(this).data('value');
                if (multiple) {
                    $('input[type="checkbox"]', this).prop('checked', function(i, v) { return !v; });
                    selected = toggleEntryFromArray(valuesSelected, selectedValue, $select);
                    // $(this).toggleClass('selected');
                    //$newSelect.trigger('focus');
                } else {
                    options.find('li').removeClass('active');
                    $(this).toggleClass('active');
                    $newSelect.val($(this).text());
                }
                activateOption(options, $(this));
                if(!$(this).hasClass("active")) {
                    $(this).removeClass("selected");
                }
                $select.find('option').filter(function(){ return $(this).val() == selectedValue}).prop('selected', selected);
                // Trigger onchange() event
                $select.trigger('change');
                if (typeof callback !== 'undefined') callback();
            }

            e.stopPropagation();
        });


        // Wrap Elements
        $select.wrap(wrapper);
        // Add Select Display Element
        var dropdownIcon = $('<span class="caret">&#9660;</span>');
        if ($select.is(':disabled'))
            dropdownIcon.addClass('disabled');

        // escape double quotes
        var sanitizedLabelHtml = label.replace(/"/g, '&quot;');

        var $newSelect = $('<input type="text" class="select-dropdown" readonly="true" ' + (($select.is(':disabled')) ? 'disabled' : '') + ' data-activates="select-options-' + uniqueID +'" value="'+ sanitizedLabelHtml +'"/>');
        $select.before($newSelect);
        $newSelect.before(dropdownIcon);

        $newSelect.after(options);
        // Check if section element is disabled
        if (!$select.is(':disabled')) {
            $newSelect.dropdown({'hover': false, 'closeOnClick': false});
        }

        // Copy tabindex
        if ($select.attr('tabindex')) {
            $($newSelect[0]).attr('tabindex', $select.attr('tabindex'));
        }

        $select.addClass('initialized');

        $newSelect.on({
            'focus': function (){
                if ($('ul.select-dropdown').not(options[0]).is(':visible')) {
                    $('input.select-dropdown').trigger('close');
                }
                if (!options.is(':visible')) {
                    $(this).trigger('open', ['focus']);
                    var label = $(this).val();
                    var selectedOption = options.find('li').filter(function() {
                        return $(this).text().toLowerCase() === label.toLowerCase();
                    })[0];
                    activateOption(options, selectedOption);
                }
            },
            'click': function (e){
                e.stopPropagation();
            }
        });

        $newSelect.on('blur', function() {
            if (!multiple && !searchable) {
                $(this).trigger('close');
            }
            options.find('li.selected').removeClass('selected');
            $('.search').val("");

        });

        //Added to search
        if (!multiple && searchable) {
            options.find('li').on('click', function() {
                $newSelect.trigger('close');
                options.find('li').show();
                $('.search').val("");
            });
        }

        options.hover(function() {
            optionsHover = true;
        }, function () {
            optionsHover = false;
        });

        $(window).on({
            'click': function () {
                (multiple || searchable) && (optionsHover || $newSelect.trigger('close'));
                options.find('li').show();
                $('.search').val("");
            }
        });

        // Add initial multiple selections.
        if (multiple) {
            $select.find("option:selected:not(:disabled)").each(function () {
                var val = Number($(this).val());
                toggleEntryFromArray(valuesSelected, val, $select);
                options.find("li[data-value=" + val + "]").find(":checkbox").prop("checked", true);
            });
        }

        // Make option as selected and scroll to selected position
        var activateOption = function(collection, newOption) {
            if (newOption) {
                collection.find('li.selected').removeClass('selected');
                var option = $(newOption);
                option.addClass('selected');
                options.scrollTo(option);
            }
        };

        // Allow user to search by typing
        // this array is cleared after 1 second
        var filterQuery = [],
            onKeyDown = function(e){
                // TAB - switch to another input
                if(e.which == 9){
                    $newSelect.trigger('close');
                    return;
                }

                // ARROW DOWN WHEN SELECT IS CLOSED - open select options
                if(e.which == 40 && !options.is(':visible')){
                    $newSelect.trigger('open');
                    return;
                }

                // ENTER WHEN SELECT IS CLOSED - submit form
                if(e.which == 13 && !options.is(':visible')){
                    return;
                }

                e.preventDefault();

                // CASE WHEN USER TYPE LETTERS
                var letter = String.fromCharCode(e.which).toLowerCase(),
                    nonLetters = [9,13,27,38,40];
                if (letter && (nonLetters.indexOf(e.which) === -1)) {
                    filterQuery.push(letter);

                    var string = filterQuery.join(''),
                        newOption = options.find('li').filter(function() {
                            return $(this).text().toLowerCase().indexOf(string) === 0;
                        })[0];

                    if (newOption) {
                        activateOption(options, newOption);
                    }
                }

                // ENTER - select option and close when select options are opened
                if (e.which == 13) {
                    var activeOption = options.find('li.selected:not(.disabled)')[0];
                    if(activeOption){
                        $(activeOption).trigger('click');
                        if (!multiple) {
                            $newSelect.trigger('close');
                        }
                    }
                }

                // ARROW DOWN - move to next not disabled option
                if (e.which == 40) {
                    if (options.find('li.selected').length) {
                        newOption = options.find('li.selected').next('li:not(.disabled)')[0];
                    } else {
                        newOption = options.find('li:not(.disabled)')[0];
                    }
                    activateOption(options, newOption);
                }

                // ESC - close options
                if (e.which == 27) {
                    $newSelect.trigger('close');
                }

                // ARROW UP - move to previous not disabled option
                if (e.which == 38) {
                    newOption = options.find('li.selected').prev('li:not(.disabled)')[0];
                    if(newOption)
                        activateOption(options, newOption);
                }

                // Automaticaly clean filter query so user can search again by starting letters
                setTimeout(function(){ filterQuery = []; }, 1000);
            };

        $newSelect.on('keydown', onKeyDown);
    });

    function toggleEntryFromArray(entriesArray, entryIndex, select) {
        var index = entriesArray.indexOf(entryIndex),
            notAdded = index === -1;

        if (notAdded) {
            entriesArray.push(entryIndex);
        } else {
            entriesArray.splice(index, 1);
        }

        select.siblings('ul.dropdown-content').find('li[data-value="' + entryIndex + '"]').toggleClass('active');
        // use notAdded instead of true (to detect if the option is selected or not)
        select.find('option[value="'+entryIndex+'"]').prop('selected', notAdded);
        setValueToInput(entriesArray, select);

        return notAdded;
    }

    function setValueToInput(entriesArray, select) {
        var value = '';

        for (var i = 0, count = entriesArray.length; i < count; i++) {
            var text = select.find('option[value="'+entriesArray[i]+'"]').text();
            i === 0 ? value += text : value += ', ' + text;
        }

        if (value === '') {
            value = select.find('option:disabled').eq(0).text();
        }

        select.siblings('input.select-dropdown').val(value);
    }
};