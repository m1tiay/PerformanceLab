var breadcrumbs = [];
var role;
var path;
var userId;
var currentUrl = '', previuosUrl = '';
$(function() {
    //Конфиг календаря
    $.extend($.fn.pickadate.defaults, {
        firstDay: 1,
        // Months and weekdays
        monthsFull: [ 'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь' ],
        monthsShort: [ 'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь' ],
        weekdaysFull: [ 'Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота' ],
        weekdaysShort: [ 'Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота' ],

        // Materialize modified
        weekdaysLetter: [ 'В', 'П', 'В', 'С', 'Ч', 'П', 'С' ],
        format: 'dd.mm.yyyy',

        // Today and clear
        today: 'Сегодня',
        clear: 'Очистить',
        close: 'Ок',
        onClose: function () {
            // Убираем активный элемент, чтобы при фокусе не открывался календарь
            document.activeElement.blur();
        }
    });

    $.extend($.fn.pickatime.defaults, {
        onClose: function () {
            // Убираем активный элемент, чтобы при фокусе не открывался календарь
            document.activeElement.blur();
        }
    });

    $.fn.select2.amd.define('select2/i18n/ru',[],function () {
        // Russian
        return {
            errorLoading: function () {
                return 'Результат не может быть загружен.';
            },
            inputTooLong: function (args) {
                var overChars = args.input.length - args.maximum;
                var message = 'Пожалуйста, удалите ' + overChars + ' символ';
                if (overChars >= 2 && overChars <= 4) {
                    message += 'а';
                } else if (overChars >= 5) {
                    message += 'ов';
                }
                return message;
            },
            inputTooShort: function (args) {
                var remainingChars = args.minimum - args.input.length;

                var message = 'Пожалуйста, введите ' + remainingChars + ' или более символов';

                return message;
            },
            loadingMore: function () {
                return 'Загружаем ещё ресурсы…';
            },
            maximumSelected: function (args) {
                var message = 'Вы можете выбрать ' + args.maximum + ' элемент';

                if (args.maximum  >= 2 && args.maximum <= 4) {
                    message += 'а';
                } else if (args.maximum >= 5) {
                    message += 'ов';
                }

                return message;
            },
            noResults: function () {
                return 'Ничего не найдено';
            },
            searching: function () {
                return 'Поиск…';
            }
        };
    });
    $.fn.select2.defaults.set('language', 'ru');

    var router = $.Router();
    router.path = router.path ? router.path : ["main"];
    //При загрузке страницы контен загружается внутри обвязки (wrapper.js)
    userLoader();
    window.onhashchange = function () {
        //userLoader(router);
        loadContent();
    }
}).ajaxError(function (event, jqXHR) {
    if (jqXHR.responseJSON && jqXHR.responseJSON.status == 401) {
        location.href = '/login';
        $.cookie('sessionExpired', true);
    }
});

//Загружаем контент
function loadContent() {
    previuosUrl = currentUrl;
    currentUrl = location.href;
    var componentName;
    window.scrollTo(0, 0);
    //По умолчанию табы из обертки спрятаны
    if($.Router().path && $.Router().path.length > 0) {
        componentName = [$.Router().path[0]];
    } else {
        switch(role) {
            case 'director': window.location.hash = "#tickets?state=opened"; break;
            case 'contractor': window.location.hash = "#tasks?state=opened"; break;
            case 'engineer':
            case 'senior':
            case 'leader':
            case 'master':
                window.location.hash = "#tickets?state=opened"; break;
        }
        return;
    }

    index_loadTemplate(componentName, function(template) {
        index_loadScript(componentName, template);
    });
}
//Загружаем обвязку
function userLoader() {
    $.ajax({
        type: 'GET',
        url: 'api/checkLogin'
    }).done(function (rights) {
        if (~rights.roles.indexOf('ROLE_ADMIN')) {
            role = 'admin';
            path = 'admin';
        } else if (rights.roles.indexOf('ROLE_MASTER') !== -1) {
            role = 'master';
            path = 'engineer';
        } else if (rights.roles.indexOf('ROLE_LEADER_ENGINEER') !== -1) {
            role = 'leader';
            path = 'engineer';
        } else if (rights.roles.indexOf('ROLE_SENIOR_ENGINEER') !== -1) {
            role = 'senior';
            path = 'engineer';
        } else if (rights.roles.indexOf('ROLE_ENGINEER') !== -1) {
            role = 'engineer';
            path = 'engineer';
        } else if (rights.roles.indexOf('ROLE_CONTRACTOR') !== -1) {
            role = 'contractor';
            path = 'contractor';
        } else if (rights.roles.indexOf('ROLE_SHOP_DIRECTOR') !== -1) {
            role= 'director';
            path = 'director';
        }
            $.ajax({
            type: 'GET',
            url: 'api/user/info'
        }).done(function (user) {
            userId = user.id;
            index_loadTemplate(["wrapper"], function (template) {
                $.ajax({
                    url: path + "/wrapper/wrapper.js"
                }).done(function (script) {
                    window["wrapper"](template, user, rights);
                }).fail(function (XHR) {
                    console.error("Ошибка загрузки скрипта: " + componentName[0] + ".js");
                });
            })
        })
    });
}

//Функция для работы с крошками внутри каталога
function renderBreadcrumbs(level, router) {
    var breadWrapper = $('#bread_wrapper');
    breadWrapper.empty();
    breadWrapper.append("<a href='/' class='breadcrumb'>" + ((router.args["user"]) ? ("?user=" + router.args["user"]) : ("")) + "" + (router.path[0]=="catalog" ? "Создание нового инцидента" : "База знаний") + "</a>");
    var isFromLink = breadcrumbs.filter(function (item) {
            return item.id == level;
        }).length == 0 && level != 0;
    if (isFromLink) {
        $.ajax({
            type: 'GET',
            url: 'api/user/catalog/breadcrumbs/' + level
        }).done(
            function (data) {
                breadcrumbs = data;
                breadcrumbs.forEach(function (item, index, object) {
                    if (level && item.id <= level) {
                        breadWrapper.append("<a href='/#//' class='breadcrumb'>" + ((router.args["user"]) ? ("?user=" + router.args["user"]) : ("")) + "" + item.name + "</a>");
                    } else {
                        object.splice(index, object.length - index);
                    }
                })
            });

    } else {
        breadcrumbs.forEach(function (item, index, object) {
            if (level && item.id <= level) {
                breadWrapper.append("<a href='/#//' class='breadcrumb'>" + ((router.args["user"]) ? ("?user=" + router.args["user"]) : ("")) + "" + item.name + "</a>");
            } else {
                object.splice(index, object.length - index);
            }
        })
    }
}

//Функция загрузки шаблонов в проект
function index_loadTemplate(componentName, loadCallback, errorCallback) {
    $.ajax({
        url: path + '/' + componentName[0] + "/" + (componentName[1] ? componentName[1] : componentName[0]) + ".dust"
    }).done(function (template) {
        loadCallback ? loadCallback(template) : null;
    }).fail(function (XHR) {
        console.error("Ошибка загрузки шаблона с путем: " + path);
        errorCallback ? errorCallback(XHR) : null;
    })
}
//Запускаем нужный скрипт
function index_loadScript(componentName, template, errorCallback) {
    $.ajax({
        url: path + "/" + componentName[0] + "/" + componentName[0] + ".js"
    }).done(function (script) {
        script ? window[componentName](template) : null;
    }).fail(function (XHR) {
        console.error("Ошибка загрузки скрипта: " + componentName[0] + ".js");
        errorCallback ? errorCallback(XHR) : null;
    });
}